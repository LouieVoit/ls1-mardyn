file(GLOB_RECURSE MY_SRC
        "*.cpp"
        "*.h"
        )

# if unit tests are disabled, remove the unit tests!
if(NOT ENABLE_UNIT_TESTS)
    list(FILTER MY_SRC EXCLUDE REGEX "/tests/")
endif()

# if mpi is not enabled, remove the uneeded source files
if(NOT ENABLE_MPI)
    # duplicate the list
    set(MY_SRC_BACK ${MY_SRC})
    # exclude everything from parallel
    list(FILTER MY_SRC EXCLUDE REGEX "/parallel/")

    # but include DomainDecompBase* and LoadCalc*
    list(FILTER MY_SRC_BACK INCLUDE REGEX "/parallel/")
    list(FILTER MY_SRC_BACK INCLUDE REGEX "DomainDecompBase|LoadCalc|Zonal|ForceHelper")
    list(APPEND MY_SRC ${MY_SRC_BACK})
else()
    if(NOT ENABLE_ALLLBL)
        list(FILTER MY_SRC EXCLUDE REGEX "ALLLoadBalancer")
    endif()
endif()

# if fmm fft is disabled, remove everything in an fft directory
if(NOT ENABLE_FMM_FFT)
    list(FILTER MY_SRC EXCLUDE REGEX "/fft/")
endif()

# if vtk is disabled, remove everything in a vtk directory
if(NOT ENABLE_VTK)
    list(FILTER MY_SRC EXCLUDE REGEX "/vtk/")
endif()

if (NOT ENABLE_AUTOPAS)
    list(FILTER MY_SRC EXCLUDE REGEX "AutoPas")
else()
#    set(MY_SRC_BACK ${MY_SRC})
#    list(FILTER MY_SRC_BACK INCLUDE REGEX "AutoPas|ParticleIterator")
#    list(FILTER MY_SRC EXCLUDE REGEX "/particleContainer/")
#    list(APPEND MY_SRC ${MY_SRC_BACK})
    list(FILTER MY_SRC EXCLUDE REGEX "LinkedCells|VectorizedCellProcessorTest")
endif ()

# add the executable
ADD_EXECUTABLE(MarDyn
        ${MY_SRC}
        parallel/ForceHelper.h)

# dependencies for lz4
if (ENABLE_LZ4)
    add_dependencies(MarDyn liblz4)
endif()

# find adios
if (ENABLE_ADIOS2)
    TARGET_COMPILE_DEFINITIONS(MarDyn PUBLIC "ENABLE_ADIOS2")
    if (FIND_PACKAGE_ADIOS2)
        find_package(ADIOS2 REQUIRED)
        if (NOT DEFINED ADIOS2_HAVE_MPI)
            set(ADIOS2_HAVE_MPI OFF)
        endif()
        if ((ADIOS2_HAVE_MPI OR ENABLE_MPI) AND (NOT (ADIOS2_HAVE_MPI AND ENABLE_MPI))) # handish implementation of xor (cmake's EQUAL does not work)
            message(FATAL_ERROR "
            You're using an external ADIOS2.
            ADIOS2_HAVE_MPI set to \"${ADIOS2_HAVE_MPI}\" and ls1 ENALBE_MPI is set to \"${ENABLE_MPI}\".
            For a parallel build, MPI has to be enabled in the packaged ADIOS2 as well as ls1 (ADIOS2_ENABLE_MPI=ON, ENABLE_MPI=ON).
            For a sequential build, deactivate MPI both times.")
        endif()
        TARGET_LINK_LIBRARIES(MarDyn adios2::adios2)
    else()
        add_custom_command(TARGET MarDyn POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${adios2fetch_BINARY_DIR}/bin/bpls bpls)
    endif()
else()
    list(FILTER MY_SRC EXCLUDE REGEX "adios2")
endif()

# we just add all libraries here. If a library is not set, it will simply be ignored.
TARGET_LINK_LIBRARIES(MarDyn
        ${BLAS_LIB}    # for armadillo
        ${LAPACK_LIB}  # for armadillo
        ${VTK_LIB}     # for VTK/xerces
        ${CPPUNIT_LIB} # for unit tests
        ${AUTOPAS_LIB} # for autopas
        ${ADIOS2_LIB}  # for adios2
        ${LZ4_LIB}     # for LZ4 compression
        ${ALL_LIB}     # for ALL
        )

ADD_TEST(
        NAME MarDyn_test
        COMMAND MarDyn -t -d ${PROJECT_SOURCE_DIR}/test_input
)
