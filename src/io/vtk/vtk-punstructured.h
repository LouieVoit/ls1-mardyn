// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VTK_PUNSTRUCTURED_H
#define VTK_PUNSTRUCTURED_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "xml-schema.h"

// Forward declarations.
//
class PUnstructuredGrid_t;
class VTKFile_t;
class PPointData;
class PCellData;
class PPoints;
class PCells;
class Piece;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "vtk-unstructured.h"

class PUnstructuredGrid_t: public ::xml_schema::type
{
  public:
  // PPointData
  //
  typedef ::PPointData PPointData_type;
  typedef ::xsd::cxx::tree::traits< PPointData_type, char > PPointData_traits;

  const PPointData_type&
  PPointData () const;

  PPointData_type&
  PPointData ();

  void
  PPointData (const PPointData_type& x);

  void
  PPointData (::std::unique_ptr< PPointData_type > p);

  // PCellData
  //
  typedef ::PCellData PCellData_type;
  typedef ::xsd::cxx::tree::traits< PCellData_type, char > PCellData_traits;

  const PCellData_type&
  PCellData () const;

  PCellData_type&
  PCellData ();

  void
  PCellData (const PCellData_type& x);

  void
  PCellData (::std::unique_ptr< PCellData_type > p);

  // PPoints
  //
  typedef ::PPoints PPoints_type;
  typedef ::xsd::cxx::tree::traits< PPoints_type, char > PPoints_traits;

  const PPoints_type&
  PPoints () const;

  PPoints_type&
  PPoints ();

  void
  PPoints (const PPoints_type& x);

  void
  PPoints (::std::unique_ptr< PPoints_type > p);

  // PCells
  //
  typedef ::PCells PCells_type;
  typedef ::xsd::cxx::tree::traits< PCells_type, char > PCells_traits;

  const PCells_type&
  PCells () const;

  PCells_type&
  PCells ();

  void
  PCells (const PCells_type& x);

  void
  PCells (::std::unique_ptr< PCells_type > p);

  // Piece
  //
  typedef ::Piece Piece_type;
  typedef ::xsd::cxx::tree::sequence< Piece_type > Piece_sequence;
  typedef Piece_sequence::iterator Piece_iterator;
  typedef Piece_sequence::const_iterator Piece_const_iterator;
  typedef ::xsd::cxx::tree::traits< Piece_type, char > Piece_traits;

  const Piece_sequence&
  Piece () const;

  Piece_sequence&
  Piece ();

  void
  Piece (const Piece_sequence& s);

  // GhostLevel
  //
  typedef ::xml_schema::integer GhostLevel_type;
  typedef ::xsd::cxx::tree::traits< GhostLevel_type, char > GhostLevel_traits;

  const GhostLevel_type&
  GhostLevel () const;

  static GhostLevel_type
  GhostLevel_default_value ();

  // Constructors.
  //
  PUnstructuredGrid_t (const PPointData_type&,
                       const PCellData_type&,
                       const PPoints_type&,
                       const PCells_type&);

  PUnstructuredGrid_t (::std::unique_ptr< PPointData_type >,
                       ::std::unique_ptr< PCellData_type >,
                       ::std::unique_ptr< PPoints_type >,
                       ::std::unique_ptr< PCells_type >);

  PUnstructuredGrid_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  PUnstructuredGrid_t (const PUnstructuredGrid_t& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual PUnstructuredGrid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PUnstructuredGrid_t&
  operator= (const PUnstructuredGrid_t& x);

  virtual 
  ~PUnstructuredGrid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< PPointData_type > PPointData_;
  ::xsd::cxx::tree::one< PCellData_type > PCellData_;
  ::xsd::cxx::tree::one< PPoints_type > PPoints_;
  ::xsd::cxx::tree::one< PCells_type > PCells_;
  Piece_sequence Piece_;
  ::xsd::cxx::tree::one< GhostLevel_type > GhostLevel_;
};

class VTKFile_t: public ::xml_schema::type
{
  public:
  // PUnstructuredGrid
  //
  typedef ::PUnstructuredGrid_t PUnstructuredGrid_type;
  typedef ::xsd::cxx::tree::optional< PUnstructuredGrid_type > PUnstructuredGrid_optional;
  typedef ::xsd::cxx::tree::traits< PUnstructuredGrid_type, char > PUnstructuredGrid_traits;

  const PUnstructuredGrid_optional&
  PUnstructuredGrid () const;

  PUnstructuredGrid_optional&
  PUnstructuredGrid ();

  void
  PUnstructuredGrid (const PUnstructuredGrid_type& x);

  void
  PUnstructuredGrid (const PUnstructuredGrid_optional& x);

  void
  PUnstructuredGrid (::std::unique_ptr< PUnstructuredGrid_type > p);

  // UnstructuredGrid
  //
  typedef ::UnstructuredGrid_t UnstructuredGrid_type;
  typedef ::xsd::cxx::tree::optional< UnstructuredGrid_type > UnstructuredGrid_optional;
  typedef ::xsd::cxx::tree::traits< UnstructuredGrid_type, char > UnstructuredGrid_traits;

  const UnstructuredGrid_optional&
  UnstructuredGrid () const;

  UnstructuredGrid_optional&
  UnstructuredGrid ();

  void
  UnstructuredGrid (const UnstructuredGrid_type& x);

  void
  UnstructuredGrid (const UnstructuredGrid_optional& x);

  void
  UnstructuredGrid (::std::unique_ptr< UnstructuredGrid_type > p);

  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // version
  //
  typedef ::xml_schema::string version_type;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_type&
  version () const;

  static const version_type&
  version_default_value ();

  // byte_order
  //
  typedef ::xml_schema::string byte_order_type;
  typedef ::xsd::cxx::tree::traits< byte_order_type, char > byte_order_traits;

  const byte_order_type&
  byte_order () const;

  static const byte_order_type&
  byte_order_default_value ();

  // Constructors.
  //
  VTKFile_t (const type_type&);

  VTKFile_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  VTKFile_t (const VTKFile_t& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual VTKFile_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  VTKFile_t&
  operator= (const VTKFile_t& x);

  virtual 
  ~VTKFile_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PUnstructuredGrid_optional PUnstructuredGrid_;
  UnstructuredGrid_optional UnstructuredGrid_;
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< version_type > version_;
  static const version_type version_default_value_;
  ::xsd::cxx::tree::one< byte_order_type > byte_order_;
  static const byte_order_type byte_order_default_value_;
};

class PPointData: public ::xml_schema::type
{
  public:
  // PDataArray
  //
  typedef ::DataArray_t PDataArray_type;
  typedef ::xsd::cxx::tree::sequence< PDataArray_type > PDataArray_sequence;
  typedef PDataArray_sequence::iterator PDataArray_iterator;
  typedef PDataArray_sequence::const_iterator PDataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< PDataArray_type, char > PDataArray_traits;

  const PDataArray_sequence&
  PDataArray () const;

  PDataArray_sequence&
  PDataArray ();

  void
  PDataArray (const PDataArray_sequence& s);

  // Constructors.
  //
  PPointData ();

  PPointData (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  PPointData (const PPointData& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual PPointData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PPointData&
  operator= (const PPointData& x);

  virtual 
  ~PPointData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PDataArray_sequence PDataArray_;
};

class PCellData: public ::xml_schema::type
{
  public:
  // PDataArray
  //
  typedef ::DataArray_t PDataArray_type;
  typedef ::xsd::cxx::tree::sequence< PDataArray_type > PDataArray_sequence;
  typedef PDataArray_sequence::iterator PDataArray_iterator;
  typedef PDataArray_sequence::const_iterator PDataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< PDataArray_type, char > PDataArray_traits;

  const PDataArray_sequence&
  PDataArray () const;

  PDataArray_sequence&
  PDataArray ();

  void
  PDataArray (const PDataArray_sequence& s);

  // Constructors.
  //
  PCellData ();

  PCellData (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PCellData (const PCellData& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual PCellData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PCellData&
  operator= (const PCellData& x);

  virtual 
  ~PCellData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PDataArray_sequence PDataArray_;
};

class PPoints: public ::xml_schema::type
{
  public:
  // PDataArray
  //
  typedef ::DataArray_t PDataArray_type;
  typedef ::xsd::cxx::tree::sequence< PDataArray_type > PDataArray_sequence;
  typedef PDataArray_sequence::iterator PDataArray_iterator;
  typedef PDataArray_sequence::const_iterator PDataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< PDataArray_type, char > PDataArray_traits;

  const PDataArray_sequence&
  PDataArray () const;

  PDataArray_sequence&
  PDataArray ();

  void
  PDataArray (const PDataArray_sequence& s);

  // Constructors.
  //
  PPoints ();

  PPoints (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  PPoints (const PPoints& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual PPoints*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PPoints&
  operator= (const PPoints& x);

  virtual 
  ~PPoints ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PDataArray_sequence PDataArray_;
};

class PCells: public ::xml_schema::type
{
  public:
  // PDataArray
  //
  typedef ::DataArray_t PDataArray_type;
  typedef ::xsd::cxx::tree::sequence< PDataArray_type > PDataArray_sequence;
  typedef PDataArray_sequence::iterator PDataArray_iterator;
  typedef PDataArray_sequence::const_iterator PDataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< PDataArray_type, char > PDataArray_traits;

  const PDataArray_sequence&
  PDataArray () const;

  PDataArray_sequence&
  PDataArray ();

  void
  PDataArray (const PDataArray_sequence& s);

  // Constructors.
  //
  PCells ();

  PCells (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  PCells (const PCells& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual PCells*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PCells&
  operator= (const PCells& x);

  virtual 
  ~PCells ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PDataArray_sequence PDataArray_;
};

class Piece: public ::xml_schema::type
{
  public:
  // Source
  //
  typedef ::xml_schema::string Source_type;
  typedef ::xsd::cxx::tree::traits< Source_type, char > Source_traits;

  const Source_type&
  Source () const;

  Source_type&
  Source ();

  void
  Source (const Source_type& x);

  void
  Source (::std::unique_ptr< Source_type > p);

  // Constructors.
  //
  Piece (const Source_type&);

  Piece (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Piece (const Piece& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Piece*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Piece&
  operator= (const Piece& x);

  virtual 
  ~Piece ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Source_type > Source_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::VTKFile_t >
VTKFile (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::VTKFile_t >
VTKFile (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::VTKFile_t >
VTKFile (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const PUnstructuredGrid_t&);

void
operator<< (::xercesc::DOMElement&, const VTKFile_t&);

// Serialize to std::ostream.
//

void
VTKFile (::std::ostream& os,
         const ::VTKFile_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
VTKFile (::std::ostream& os,
         const ::VTKFile_t& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
VTKFile (::std::ostream& os,
         const ::VTKFile_t& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
VTKFile (::xercesc::XMLFormatTarget& ft,
         const ::VTKFile_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
VTKFile (::xercesc::XMLFormatTarget& ft,
         const ::VTKFile_t& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
VTKFile (::xercesc::XMLFormatTarget& ft,
         const ::VTKFile_t& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
VTKFile (::xercesc::DOMDocument& d,
         const ::VTKFile_t& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
VTKFile (const ::VTKFile_t& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const PPointData&);

void
operator<< (::xercesc::DOMElement&, const PCellData&);

void
operator<< (::xercesc::DOMElement&, const PPoints&);

void
operator<< (::xercesc::DOMElement&, const PCells&);

void
operator<< (::xercesc::DOMElement&, const Piece&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VTK_PUNSTRUCTURED_H
