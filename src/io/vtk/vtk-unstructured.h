// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VTK_UNSTRUCTURED_H
#define VTK_UNSTRUCTURED_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "xml-schema.h"

// Forward declarations.
//
class DataArrayList_t;
class DataArray_t;
class PieceUnstructuredGrid_t;
class UnstructuredGrid_t;
class type;
class PointData;
class CellData;
class Points;
class Cells;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class DataArrayList_t: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal >
{
  public:
  DataArrayList_t ();

  DataArrayList_t (size_type n, const ::xml_schema::decimal& x);

  template < typename I >
  DataArrayList_t (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal > (begin, end, this)
  {
  }

  DataArrayList_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  DataArrayList_t (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  DataArrayList_t (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  DataArrayList_t (const DataArrayList_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual DataArrayList_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DataArrayList_t ();
};

class DataArray_t: public ::DataArrayList_t
{
  public:
  // type
  //
  typedef ::type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_type&
  Name () const;

  Name_type&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (::std::unique_ptr< Name_type > p);

  // NumberOfComponents
  //
  typedef ::xml_schema::integer NumberOfComponents_type;
  typedef ::xsd::cxx::tree::traits< NumberOfComponents_type, char > NumberOfComponents_traits;

  const NumberOfComponents_type&
  NumberOfComponents () const;

  NumberOfComponents_type&
  NumberOfComponents ();

  void
  NumberOfComponents (const NumberOfComponents_type& x);

  // format
  //
  typedef ::xml_schema::string format_type;
  typedef ::xsd::cxx::tree::traits< format_type, char > format_traits;

  const format_type&
  format () const;

  static const format_type&
  format_default_value ();

  // offset
  //
  typedef ::xml_schema::integer offset_type;
  typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
  typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

  const offset_optional&
  offset () const;

  offset_optional&
  offset ();

  void
  offset (const offset_type& x);

  void
  offset (const offset_optional& x);

  // Constructors.
  //
  DataArray_t (const type_type&,
               const Name_type&,
               const NumberOfComponents_type&);

  DataArray_t (const ::DataArrayList_t&,
               const type_type&,
               const Name_type&,
               const NumberOfComponents_type&);

  DataArray_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  DataArray_t (const DataArray_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual DataArray_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  DataArray_t&
  operator= (const DataArray_t& x);

  virtual 
  ~DataArray_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< Name_type > Name_;
  ::xsd::cxx::tree::one< NumberOfComponents_type > NumberOfComponents_;
  ::xsd::cxx::tree::one< format_type > format_;
  static const format_type format_default_value_;
  offset_optional offset_;
};

class PieceUnstructuredGrid_t: public ::xml_schema::type
{
  public:
  // PointData
  //
  typedef ::PointData PointData_type;
  typedef ::xsd::cxx::tree::traits< PointData_type, char > PointData_traits;

  const PointData_type&
  PointData () const;

  PointData_type&
  PointData ();

  void
  PointData (const PointData_type& x);

  void
  PointData (::std::unique_ptr< PointData_type > p);

  // CellData
  //
  typedef ::CellData CellData_type;
  typedef ::xsd::cxx::tree::traits< CellData_type, char > CellData_traits;

  const CellData_type&
  CellData () const;

  CellData_type&
  CellData ();

  void
  CellData (const CellData_type& x);

  void
  CellData (::std::unique_ptr< CellData_type > p);

  // Points
  //
  typedef ::Points Points_type;
  typedef ::xsd::cxx::tree::traits< Points_type, char > Points_traits;

  const Points_type&
  Points () const;

  Points_type&
  Points ();

  void
  Points (const Points_type& x);

  void
  Points (::std::unique_ptr< Points_type > p);

  // Cells
  //
  typedef ::Cells Cells_type;
  typedef ::xsd::cxx::tree::traits< Cells_type, char > Cells_traits;

  const Cells_type&
  Cells () const;

  Cells_type&
  Cells ();

  void
  Cells (const Cells_type& x);

  void
  Cells (::std::unique_ptr< Cells_type > p);

  // NumberOfPoints
  //
  typedef ::xml_schema::integer NumberOfPoints_type;
  typedef ::xsd::cxx::tree::traits< NumberOfPoints_type, char > NumberOfPoints_traits;

  const NumberOfPoints_type&
  NumberOfPoints () const;

  NumberOfPoints_type&
  NumberOfPoints ();

  void
  NumberOfPoints (const NumberOfPoints_type& x);

  // NumberOfCells
  //
  typedef ::xml_schema::integer NumberOfCells_type;
  typedef ::xsd::cxx::tree::traits< NumberOfCells_type, char > NumberOfCells_traits;

  const NumberOfCells_type&
  NumberOfCells () const;

  NumberOfCells_type&
  NumberOfCells ();

  void
  NumberOfCells (const NumberOfCells_type& x);

  // Constructors.
  //
  PieceUnstructuredGrid_t (const PointData_type&,
                           const CellData_type&,
                           const Points_type&,
                           const Cells_type&,
                           const NumberOfPoints_type&,
                           const NumberOfCells_type&);

  PieceUnstructuredGrid_t (::std::unique_ptr< PointData_type >,
                           ::std::unique_ptr< CellData_type >,
                           ::std::unique_ptr< Points_type >,
                           ::std::unique_ptr< Cells_type >,
                           const NumberOfPoints_type&,
                           const NumberOfCells_type&);

  PieceUnstructuredGrid_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  PieceUnstructuredGrid_t (const PieceUnstructuredGrid_t& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual PieceUnstructuredGrid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PieceUnstructuredGrid_t&
  operator= (const PieceUnstructuredGrid_t& x);

  virtual 
  ~PieceUnstructuredGrid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< PointData_type > PointData_;
  ::xsd::cxx::tree::one< CellData_type > CellData_;
  ::xsd::cxx::tree::one< Points_type > Points_;
  ::xsd::cxx::tree::one< Cells_type > Cells_;
  ::xsd::cxx::tree::one< NumberOfPoints_type > NumberOfPoints_;
  ::xsd::cxx::tree::one< NumberOfCells_type > NumberOfCells_;
};

class UnstructuredGrid_t: public ::xml_schema::type
{
  public:
  // Piece
  //
  typedef ::PieceUnstructuredGrid_t Piece_type;
  typedef ::xsd::cxx::tree::traits< Piece_type, char > Piece_traits;

  const Piece_type&
  Piece () const;

  Piece_type&
  Piece ();

  void
  Piece (const Piece_type& x);

  void
  Piece (::std::unique_ptr< Piece_type > p);

  // Constructors.
  //
  UnstructuredGrid_t (const Piece_type&);

  UnstructuredGrid_t (::std::unique_ptr< Piece_type >);

  UnstructuredGrid_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  UnstructuredGrid_t (const UnstructuredGrid_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual UnstructuredGrid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  UnstructuredGrid_t&
  operator= (const UnstructuredGrid_t& x);

  virtual 
  ~UnstructuredGrid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Piece_type > Piece_;
};

class type: public ::xml_schema::string
{
  public:
  enum value
  {
    Int8,
    UInt8,
    Int16,
    UInt16,
    Int32,
    UInt32,
    Int64,
    UInt64,
    Float32,
    Float64
  };

  type (value v);

  type (const char* v);

  type (const ::std::string& v);

  type (const ::xml_schema::string& v);

  type (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const type& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type_convert ();
  }

  protected:
  value
  _xsd_type_convert () const;

  public:
  static const char* const _xsd_type_literals_[10];
  static const value _xsd_type_indexes_[10];
};

class PointData: public ::xml_schema::type
{
  public:
  // DataArray
  //
  typedef ::DataArray_t DataArray_type;
  typedef ::xsd::cxx::tree::sequence< DataArray_type > DataArray_sequence;
  typedef DataArray_sequence::iterator DataArray_iterator;
  typedef DataArray_sequence::const_iterator DataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< DataArray_type, char > DataArray_traits;

  const DataArray_sequence&
  DataArray () const;

  DataArray_sequence&
  DataArray ();

  void
  DataArray (const DataArray_sequence& s);

  // Constructors.
  //
  PointData ();

  PointData (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PointData (const PointData& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual PointData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PointData&
  operator= (const PointData& x);

  virtual 
  ~PointData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DataArray_sequence DataArray_;
};

class CellData: public ::xml_schema::type
{
  public:
  // DataArray
  //
  typedef ::DataArray_t DataArray_type;
  typedef ::xsd::cxx::tree::sequence< DataArray_type > DataArray_sequence;
  typedef DataArray_sequence::iterator DataArray_iterator;
  typedef DataArray_sequence::const_iterator DataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< DataArray_type, char > DataArray_traits;

  const DataArray_sequence&
  DataArray () const;

  DataArray_sequence&
  DataArray ();

  void
  DataArray (const DataArray_sequence& s);

  // Constructors.
  //
  CellData ();

  CellData (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  CellData (const CellData& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual CellData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CellData&
  operator= (const CellData& x);

  virtual 
  ~CellData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DataArray_sequence DataArray_;
};

class Points: public ::xml_schema::type
{
  public:
  // DataArray
  //
  typedef ::DataArray_t DataArray_type;
  typedef ::xsd::cxx::tree::sequence< DataArray_type > DataArray_sequence;
  typedef DataArray_sequence::iterator DataArray_iterator;
  typedef DataArray_sequence::const_iterator DataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< DataArray_type, char > DataArray_traits;

  const DataArray_sequence&
  DataArray () const;

  DataArray_sequence&
  DataArray ();

  void
  DataArray (const DataArray_sequence& s);

  // Constructors.
  //
  Points ();

  Points (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Points (const Points& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Points*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Points&
  operator= (const Points& x);

  virtual 
  ~Points ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DataArray_sequence DataArray_;
};

class Cells: public ::xml_schema::type
{
  public:
  // DataArray
  //
  typedef ::DataArray_t DataArray_type;
  typedef ::xsd::cxx::tree::sequence< DataArray_type > DataArray_sequence;
  typedef DataArray_sequence::iterator DataArray_iterator;
  typedef DataArray_sequence::const_iterator DataArray_const_iterator;
  typedef ::xsd::cxx::tree::traits< DataArray_type, char > DataArray_traits;

  const DataArray_sequence&
  DataArray () const;

  DataArray_sequence&
  DataArray ();

  void
  DataArray (const DataArray_sequence& s);

  // Constructors.
  //
  Cells ();

  Cells (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Cells (const Cells& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Cells*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Cells&
  operator= (const Cells& x);

  virtual 
  ~Cells ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DataArray_sequence DataArray_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const DataArrayList_t&);

void
operator<< (::xercesc::DOMAttr&, const DataArrayList_t&);

void
operator<< (::xml_schema::list_stream&,
            const DataArrayList_t&);

void
operator<< (::xercesc::DOMElement&, const DataArray_t&);

void
operator<< (::xercesc::DOMElement&, const PieceUnstructuredGrid_t&);

void
operator<< (::xercesc::DOMElement&, const UnstructuredGrid_t&);

void
operator<< (::xercesc::DOMElement&, const type&);

void
operator<< (::xercesc::DOMAttr&, const type&);

void
operator<< (::xml_schema::list_stream&,
            const type&);

void
operator<< (::xercesc::DOMElement&, const PointData&);

void
operator<< (::xercesc::DOMElement&, const CellData&);

void
operator<< (::xercesc::DOMElement&, const Points&);

void
operator<< (::xercesc::DOMElement&, const Cells&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VTK_UNSTRUCTURED_H
