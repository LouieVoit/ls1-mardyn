name: C/C++ CI

on: [push]

jobs:
  check_AutoPas_seq:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: prepare_seq
      run: |
        sudo apt-get install libcppunit-dev openmpi-bin -y
    - name: build with autopas sequential
      run: |
        mkdir build && cd build
        cmake -DENABLE_AUTOPAS=ON -DOPENMP=ON -DENABLE_UNIT_TESTS=1 ..
        make -j2
    - name: test sequential
      run: |
        ls
        ls build
        ls build/src
        ./build/src/MarDyn -t -d ./test_input/
    - name: validation - run with autopas aos
      run: |
        ./build/src/MarDyn ./examples/Argon/200K_18mol_l/config_autopas_aos.xml --steps=20 | tee autopas_run_log.txt
        grep "Simstep = 20" autopas_run_log.txt > simstep20.txt
        grep "T = 0.000633975" simstep20.txt
        grep "U_pot = -2.14161" simstep20.txt
        grep "p = 5.34057e-07" simstep20.txt
    - name: validation - run with autopas soa
      run: |
        ./build/src/MarDyn ./examples/Argon/200K_18mol_l/config_autopas_soa.xml --steps=20 | tee autopas_run_log.txt
        grep "Simstep = 20" autopas_run_log.txt > simstep20.txt
        grep "T = 0.000633975" simstep20.txt
        grep "U_pot = -2.14161" simstep20.txt
        grep "p = 5.34057e-07" simstep20.txt
  check_AutoPas_mpi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: prepare_mpi
      run: |
        sudo apt-get install libcppunit-dev openmpi-bin -y
    - name: build with autopas MPI
      run: |
        mkdir build-mpi && cd build-mpi
        CC=mpicc CXX=mpicxx cmake -DENABLE_ALLLBL=ON -DENABLE_MPI=ON -DENABLE_AUTOPAS=ON -DOPENMP=ON -DENABLE_UNIT_TESTS=1 ..
        make -j2
    - name: test mpi
      run: |
        mpirun -np 1 ./build-mpi/src/MarDyn -t -d ./test_input/
        mpirun -np 2 ./build-mpi/src/MarDyn -t -d ./test_input/
    - name: validation - run with autopas DD
      run: |
        mpirun -np 2 ./build-mpi/src/MarDyn ./examples/Argon/200K_18mol_l/config_autopas_aos.xml --steps=20 | tee autopas_run_log.txt
        grep "Simstep = 20" autopas_run_log.txt > simstep20.txt
        grep "T = 0.000633975" simstep20.txt
        grep "U_pot = -2.14161" simstep20.txt
        grep "p = 5.34057e-07" simstep20.txt
    - name: validation - run with autopas ALLLB
      run: |
        mpirun -np 2 ./build-mpi/src/MarDyn ./examples/Argon/200K_18mol_l/config_autopas_lc_ALL.xml --steps=20 | tee autopas_run_log.txt
        grep "Simstep = 20" autopas_run_log.txt > simstep20.txt
        grep "T = 0.000633975" simstep20.txt
        grep "U_pot = -2.14161" simstep20.txt
        grep "p = 5.34057e-07" simstep20.txt
  run_ci-matrix:
    runs-on: ubuntu-latest
    # continue-on-error: true
    strategy:
      matrix: 
        vector: ['SSE', 'AVX2']
        target: ['Debug', 'Release']
        parall: ['0', '1']
    env:
      JOBNAME: ${{ matrix.vector }}-${{ matrix.target }}-${{ matrix.parall }}
    steps:
    - uses: actions/checkout@v2
    - name: prepare_matrix
      run: |
        sudo apt-get install libcppunit-dev openmpi-bin -y
        echo "Running ${JOBNAME}"
        git status
        mkdir build_${JOBNAME}
    - if: matrix.parall == '0'
      name: Build seq. Matrix - vector ${{ matrix.vector }}, target ${{ matrix.target }}, parall ${{ matrix.parall }}
      run: |
          cd build_${JOBNAME}
          CC=gcc CXX=g++ cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} -DCMAKE_BUILD_TYPE=${{ matrix.target }} -DENABLE_MPI=OFF -DENABLE_UNIT_TESTS=1 ..
          make -j2
          cd ..
          ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
    - if: matrix.parall == '1'
      name: Build par. Matrix - vector ${{ matrix.vector }}, target ${{ matrix.target }}, parall ${{ matrix.parall }}
      run: |
          cd build_${JOBNAME}
          CC=mpicc CXX=mpicxx cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} -DCMAKE_BUILD_TYPE=${{ matrix.target }} -DENABLE_MPI=ON -DENABLE_UNIT_TESTS=1 ..
          make -j2
          cd ..
          mpirun -np 2 ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
    - if: matrix.parall == '1'
      name: Validation par. examples Matrix - vector ${{ matrix.vector }}, target ${{ matrix.target }}, parall ${{ matrix.parall }}
      run: |
          mkdir build_${JOBNAME}_master
          git remote add upstream https://github.com/ls1mardyn/ls1-mardyn.git
          git fetch upstream
          git checkout upstream/master
          git status
          cd build_${JOBNAME}_master
          CC=mpicc CXX=mpicxx cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} -DCMAKE_BUILD_TYPE=${{ matrix.target }} -DENABLE_MPI=ON -DENABLE_UNIT_TESTS=1 ..
          make -j2
          cd ..
          # python3 ./validation/validationRun/validationRun.py -m 2 -n ./build_${JOBNAME}/src/MarDyn -o ./build_${JOBNAME}_master/src/MarDyn -c ./validation/validationInput/simple-lj-direct/config.xml
          rm -f output_new output_master
          rootPath=$PWD
          echo "New commit build running examples..."
          for i in $(cat ./examples/example-list.txt)
          do
            echo $i | \
              tee -a output_new
            cd ./examples/$(dirname $i)
            mpirun -np 2 $rootPath/build_${JOBNAME}/src/MarDyn \
              $(basename $i) \
              --steps=50 \
              --final-checkpoint=0 \
              | \
                awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' \
                >> $rootPath/output_new
            cd - > /dev/null
          done
          echo "Master build running examples..."
          for i in $(cat ./examples/example-list.txt)
          do
            echo $i | \
              tee -a output_master
            cd ./examples/$(dirname $i)
            mpirun -np 2 $rootPath/build_${JOBNAME}_master/src/MarDyn \
              $(basename $i) \
              --steps=50 \
              --final-checkpoint=0 \
              | \
                awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' \
                >> $rootPath/output_master
            cd - > /dev/null
          done
          diff output_new output_master
          echo "---"
          [ "$(diff output_new output_master)" == "" ]
          
  post-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: documentation
      run: |
        sudo apt-get install doxygen -y
    - name: build doc
      run: |
        mkdir doxygen_doc || echo 'doxygen_doc Folder exists already'
        doxygen

