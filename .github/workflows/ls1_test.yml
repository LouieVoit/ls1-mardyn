name: C/C++ CI

on:
  push:
    # pushes to master
    # branches: [ master ] 
  pull_request:
    # PRs to master
    branches: [ master ]

# abort old runs if a new one is started
concurrency:
  group: ${{ github.head_ref }}-tests
  cancel-in-progress: true

jobs:
  ci-matrix:
    runs-on: ubuntu-latest
    strategy:
      # do not cancel all other workflow runs if one fails
      fail-fast: false
      matrix: 
        vector: ['SSE', 'NONE', 'AVX', 'AVX2']
        target: ['Debug', 'Release']
        parall: ['SEQ', 'PAR']
        cc: ['gcc', 'clang']
        cxx: ['g++', 'clang++']
        autopas: ['ON', 'OFF']
        procs: ['1', '4', '8'] #TODO: >= 27 ranks case, to have non-border rank
        openmp: ['ON', 'OFF']
        exclude:
            # exclude incompatible compiler pairs
          - cc: 'gcc'
            cxx: 'clang++'
          - cc: 'clang'
            cxx: 'g++'
            # exclude legacy configurations
          - vector: 'SSE'
          - vector: 'AVX'
          - openmp: 'OFF'
            # exclude SEQ & np > 1, exclude PAR & np = 1
          - parall: 'PAR'
            procs: '1'
          - parall: 'SEQ'
            procs: '4'
          - parall: 'SEQ'
            procs: '8'

    env:
      JOBNAME: ${{ matrix.vector }}-${{ matrix.target }}-${{ matrix.parall }}-${{ matrix.cc }}-${{ matrix.autopas }}-${{ matrix.procs }}-${{ matrix.openmp }}
    steps:
      # setup github actions runner node
    - uses: actions/checkout@v2
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install libcppunit-dev openmpi-bin -y
        echo "Running ${JOBNAME}"
        git status
        mkdir build_${JOBNAME}
      # build testing & unit testing
    - if: ${{ matrix.parall == 'SEQ' }}
      name: Build sequential
      run: |
          cd build_${JOBNAME}
          cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.target }} \
                -DENABLE_AUTOPAS=${{ matrix.autopas }} \
                -DENABLE_ALLLBL=OFF \
                -DOPENMP=${{ matrix.openmp }} \
                -DENABLE_MPI=OFF \
                -DENABLE_UNIT_TESTS=1 ..
          make -j2
          cd ..
          ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
    - if: ${{ matrix.parall  == 'PAR' }}
      name: Build parallel
      run: |
          cd build_${JOBNAME}
          #note: ALLLBL is enabled iff AutoPas is enabled.
          cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.target }} \
                -DENABLE_AUTOPAS=${{ matrix.autopas }} \
                -DENABLE_ALLLBL=${{ matrix.autopas }} \
                -DOPENMP=${{ matrix.openmp }} \
                -DENABLE_MPI=ON \
                -DENABLE_UNIT_TESTS=1 ..
          make -j2
          cd ..
          mpirun -np ${{ matrix.procs }} --oversubscribe ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

      # validation testing
    - if: ${{ matrix.parall == 'PAR' }}
      name: Validation
      run: |
          #build master branch equivalent to compare new build to
          mkdir build_${JOBNAME}_master
          git fetch
          git checkout master
          git status
          cd build_${JOBNAME}_master
          #note: ALLLBL is enabled iff AutoPas is enabled.
          cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.target }} \
                -DENABLE_AUTOPAS=${{ matrix.autopas }} \
                -DENABLE_ALLLBL=${{ matrix.autopas }} \
                -DOPENMP=${{ matrix.openmp }} \
                -DENABLE_MPI=ON ..
          make -j2
          cd ..
          
          #set strict pipefail option
          set -eo pipefail
          rm -f output_new output_master
          #save absolute path to root of ls1 directory
          rootPath=$PWD
          echo "New commit build running examples..."
          for i in $(cat ./examples/example-list.txt)
          do
            cd $rootPath
            echo $i | tee ${rootPath}/output_new
            cd ./examples/$(dirname $i)
            # if AutoPas is enabled, replace all occurences of LinkedCell in the examples' config files with AutoPas
            if [[ ${{ matrix.autopas }} == 'ON' ]]; then sed 's/LinkedCells/AutoPas/g' $(basename $i); else cat $(basename $i); fi >> input_new
            mpirun -np ${{ matrix.procs }} --oversubscribe $rootPath/build_${JOBNAME}/src/MarDyn ${input_new} --steps=20 | \
                | tee >
                awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' \
                >> ${rootPath}/output_new
            cd - > /dev/null
          done
          echo "Master build running examples..."
          for i in $(cat ./examples/example-list.txt)
          do
            cd $rootPath
            echo $i | tee ${rootPath}/output_master
            cd ./examples/$(dirname $i)
            # if AutoPas is enabled, replace all occurences of LinkedCell in the examples' config files with AutoPas
            if [[ ${{ matrix.autopas }} == 'ON' ]]; then sed 's/LinkedCells/AutoPas/g' $(basename $i); else cat $(basename $i); fi >> input_master
            mpirun -np ${{ matrix.procs }} --oversubscribe $rootPath/build_${JOBNAME}_master/src/MarDyn ${input_master} --steps=20 | \
                | tee >
                awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' \
                >> ${rootPath}/output_master
            cd - > /dev/null
          done
          diff output_new output_master
          echo "---"
          [ "$(diff output_new output_master)" == "" ]
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
