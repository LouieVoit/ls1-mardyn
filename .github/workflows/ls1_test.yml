name: C/C++ CI for ls1

on:
  push:
    # pushes to master
    # branches: [ master ] 
  pull_request:
    # PRs to master
    branches: [ master ]

# abort old runs if a new one is started
concurrency:
  group: ${{ github.head_ref }}-tests
  cancel-in-progress: true

jobs:
  ci-matrix:
    runs-on: ubuntu-latest
    strategy:
      # do not cancel all other workflow runs if one fails
      fail-fast: false
      matrix: 
        vector: ['SSE', 'NONE', 'AVX', 'AVX2']
        target: ['Debug', 'Release']
        parall: ['SEQ', 'PAR']
        cc: ['gcc', 'clang']
        cxx: ['g++', 'clang++']
        autopas: ['ON', 'OFF']
        procs: ['1', '4', '8'] #TODO: >= 27 ranks case, to have non-border rank
        openmp: ['ON', 'OFF']
        exclude:
            # exclude incompatible compiler pairs
          - cc: 'gcc'
            cxx: 'clang++'
          - cc: 'clang'
            cxx: 'g++'
            # exclude legacy configurations
          - vector: 'SSE'
          - vector: 'AVX'
          - openmp: 'OFF'
            # exclude SEQ & np > 1, exclude PAR & np = 1
          - parall: 'PAR'
            procs: '1'
          - parall: 'SEQ'
            procs: '4'
          - parall: 'SEQ'
            procs: '8'

    env:
      JOBNAME: ${{ join(matrix.*, '-') }}
    name: ${{ matrix.vector }}-${{ matrix.target }}-${{ matrix.parall }}-${{ matrix.cc }}-AutoPas=${{ matrix.autopas }}-Ranks=${{ matrix.procs }}-OMP=${{ matrix.openmp }}
    steps:
      # setup github actions runner node
    - uses: actions/checkout@v2
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcppunit-dev        \
          libmpich-dev
        echo "Running ${JOBNAME}"
        git status
        mkdir build_${JOBNAME}
      # build testing & unit testing
    - name: Build and Unit Test 
      run: |
          cd build_${JOBNAME}

          #translate matrix to ON/OFF for certain entries
          if [[ ${{ matrix.parall }} == 'PAR' ]]
          then
            mpi_enabled='ON'
          else
            mpi_enabled='OFF'
          fi
          if [[ ${{ matrix.parall }} == 'PAR' ]] && [[ ${{ matrix.autopas }} == 'ON' ]]
          then
            alllbl_enabled='ON'
          else
            alllbl_enabled='OFF'
          fi

          cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.target }} \
                -DENABLE_AUTOPAS=${{ matrix.autopas }} \
                -DENABLE_ALLLBL=$alllbl_enabled \
                -DOPENMP=${{ matrix.openmp }} \
                -DENABLE_MPI=$mpi_enabled \
                -DENABLE_UNIT_TESTS=1 ..
          make -j2

          cd ..

          if [[ ${{ matrix.parall }} == 'PAR' ]]
          then
            mpirun -np ${{ matrix.procs }} ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
          else
            ./build_${JOBNAME}/src/MarDyn -t -d ./test_input/
          fi
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        OMP_NUM_THREADS: 2

      # validation testing
    - if: ${{ matrix.parall == 'PAR' }}
      name: Validation
      run: |
        
          # save examples
          cp ./examples/example-list.txt branchExamples.txt
        
          #build master branch equivalent to compare new build to
          mkdir build_${JOBNAME}_master
          git fetch
          git checkout master
          git status
          cd build_${JOBNAME}_master
          #note: ALLLBL is enabled if AutoPas is enabled.
          cmake -DVECTOR_INSTRUCTIONS=${{ matrix.vector }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.target }} \
                -DENABLE_AUTOPAS=${{ matrix.autopas }} \
                -DENABLE_ALLLBL=${{ matrix.autopas }} \
                -DOPENMP=${{ matrix.openmp }} \
                -DENABLE_MPI=ON ..
          make -j2
          
          cd ..
          
          #set strict pipefail option
          set -eo pipefail
          rm -f output_new output_master
          #save absolute path to root of ls1 directory
          repoPath=$PWD
          echo "New commit build running examples..."
          for i in $(cat ${repoPath}/branchExamples.txt)
          do
            # skip if comment
            if [[ $i == \#* ]]
            then
              continue
            fi
        
            cd $repoPath
            echo $i | tee ${repoPath}/output_new
            cd ./examples/$(dirname $i)
            # if AutoPas is enabled, replace all occurences of LinkedCell in the examples' config files with AutoPas
            if [[ ${{ matrix.autopas }} == 'ON' ]]; then sed 's/LinkedCells/AutoPas/g' $(basename $i); else cat $(basename $i); fi >> input_new.xml
            # if AutoPas is enabled and no vectorization is used, the AVX functor of Autopas has to be disabled
            if [[ ${{ matrix.vector }} == 'NONE' ]]; then sed --in-place 's=AutoPas">=AutoPas">\n\t<useAVXFunctor>false</useAVXFunctor>=g' input_new.xml; fi
            mpirun -np ${{ matrix.procs }} $repoPath/build_${JOBNAME}/src/MarDyn input_new.xml --steps=20 | \
                tee | awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' >> ${repoPath}/output_new
            cd - > /dev/null
          done
          echo "Master build running examples..."
          for i in $(cat ${repoPath}/branchExamples.txt)
          do
            # skip if comment
            if [[ $i == \#* ]]
            then
              continue
            fi
          
            cd $repoPath
            echo $i | tee ${repoPath}/output_master
            cd ./examples/$(dirname $i)
            # if AutoPas is enabled, replace all occurences of LinkedCell in the examples' config files with AutoPas
            if [[ ${{ matrix.autopas }} == 'ON' ]]; then sed 's/LinkedCells/AutoPas/g' $(basename $i); else cat $(basename $i); fi >> input_master.xml
            # if AutoPas is enabled and no vectorization is used, the AVX functor of Autopas has to be disabled
            if [[ ${{ matrix.vector }} == 'NONE' ]]; then sed --in-place 's=AutoPas">=AutoPas">\n\t<useAVXFunctor>false</useAVXFunctor>=g' input_new.xml; fi
            mpirun -np ${{ matrix.procs }} $repoPath/build_${JOBNAME}_master/src/MarDyn input_master.xml --steps=20 | \
                tee | awk '/Simstep = /{ print $7 " " $10 " " $13 " " $16 }' >> ${repoPath}/output_master
            cd - > /dev/null
          done
          diff output_new output_master
          echo "---"
          [ "$(diff output_new output_master)" == "" ]
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        OMP_NUM_THREADS: 2
